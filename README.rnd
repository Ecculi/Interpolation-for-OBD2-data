# ESP32 + Bluetooth/WiFi OBD2 Dongle with Interpolation

This project focuses on reducing lag in the data readings from cheap Chinese Bluetooth/WiFi OBD2 dongles, which typically have a 200-300ms delay between readings. The project uses interpolation to smooth values such as speed, reducing the noticeable lag between data updates.

## Problem

According to [ELM Electronics](https://www.elmelectronics.com/obdtips.html#UnderstandingOBD), early OBD standards required scan tools not to request data more frequently than every 100ms. However, in practice, cheap OBD2 dongles often return readings every 200-300ms, which can create a laggy user experience when displaying data such as speed or RPM.

## Solution

This project implements interpolation to smooth values between data readings. The interpolation takes into account the delay between OBD2 data readings and transitions smoothly between the previous and new values over that time period.

## Interpolation Function

The `InterpolateValues` function is used to smooth the values:

```cpp
void InterpolateValues(float newValue, unsigned long interpolationDuration, float &outValue, float &previousValue, float &currentValue, unsigned long &runTime)
{
    if (interpolationDuration == 0)
    {
        outValue = newValue;
        return;
    }

    unsigned long currentMillis = millis();

    if (newValue != currentValue)
    {
        // New value should stop current interpolation
        previousValue = outValue;
        currentValue = newValue;
        runTime = currentMillis;
    }
    else if (currentMillis - runTime >= interpolationDuration)
    {
        // Current interpolation comes to an end
        previousValue = currentValue;
        currentValue = newValue;
        runTime = currentMillis;
    }

    // Calculate interpolation t and clamp it between 0 and 1
    float t = (float)(currentMillis - runTime) / interpolationDuration;
    if (t > 1.0f) t = 1.0f;
    if (t < 0.0f) t = 0.0f;

    // Interpolated value
    outValue = previousValue + t * (currentValue - previousValue);
}
